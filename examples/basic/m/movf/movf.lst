gpasm-0.13.7 beta               movf.asm    2-21-2015  19:10:26          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;;;;;;; movf.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00002 ;
               00003 ;This program tests operation of movf instruction according to the examples
               00004 ;on page 740 of the PIC18 user manual. Contents of register f
               00005 ;are moved to either f or wreg
               00006 ;
               00007 ;;;;;;; Program hierarchy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00008 ;
               00009 ; Mainline
               00010 ;  
               00011 ;
               00012 ;;;;;;; Assembler directives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00013 
               00014         #include p18f452.inc
               00001         LIST
               00002 ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
               00983         LIST
               00015         list  P=PIC18F452, F=INHX32, C=160, N=0, ST=OFF, MM=OFF, R=DEC, X=ON
               00016 
               00017 ;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00018 
               00019         cblock  0x000           ;Beginning of Access RAM
               00020         temp
               00021         MYREG
               00022         endc
               00023 
               00024         cblock  0x100           ;Beginning of 0x100 address block, just above Access Ram
               00025         tempBank1
               00026         endc
               00027 
               00028 ;;;;;;; Macro definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00029 
               00030 ;;;;;;; Vectors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00031 
               00032 
0000           00033         org  0x0000             ;Reset vector
0000 0000      00034         nop
0002 EF0E F000 00035         goto  Mainline
               00036 
0008           00037         org  0x0008             ;High priority interrupt vector
0008 EF04 F000 00038         goto  $                 ;Trap
               00039 
0018           00040         org  0x0018             ;Low priority interrupt vector
0018 EF0C F000 00041         goto  $                 ;Trap
               00042 
               00043 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00044 ;See manual chapter 31 for more detail on individual instructions
               00045 ;Syntax:        movf    f, d, a         (register, destination register, bank select)
               00046                                         ;"d", "a" both default to 0. For d, can use "f" 
               00047                                         ;instead of 1, can use "w" instead of 0.
               00048 
               00049 ;               movwf   f, a            (register, bank select)
               00050 ;               movlw   k               (literal)
               00051 ;               movlb   k               (literal)
               00052 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00053 
               00054 ;;;;;;; Mainline program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00055 
001C 00056 Mainline
               00057 
               00058 ;Example 1:
               00059         
               00060 
001C 0101      00061         movlb   1               ;Place 1 in BSR
001E 0E22      00062         movlw   0x22            ;Place 0x22 in wreg
0020 6F01      00063         movwf   MYREG, 1        ;Copy wreg value to MYREG
0022 0E00      00064         movlw   0x00            ;Place 0x00 in wreg
0024 04E8      00065         decf    WREG, w         ;Decrement wreg, set status bit "N" to 1
0026 5101      00066         movf    MYREG, 0, 1     ;Using bank select, move value in MYREG to wreg, 
               00067                                 ;Set status bit "N" to 0
               00068 
               00069 ;Example 2:
               00070 
0028 0E00      00071         movlw   0x00            ;Place 0 in wreg
002A 6F01      00072         movwf   MYREG, 1        ;Using banked addressing, copy wreg value to MYREG
002C 0E10      00073         movlw   0x10            ;Place 0x10 in wreg
002E 5301      00074         movf    MYREG, 1, 1     ;Using banked addressing, move MYREG value to itself,
               00075                                 ;Set status bit "Z" to 1
               00076 
               00077 ;Example 3, Case 1:
               00078         
0030 0E00      00079         movlw   0x00            ;Place 0 in wreg
0032 6E01      00080         movwf   MYREG, 0        ;Copy wreg to MYREG in access bank
0034 0E10      00081         movlw   0x10            ;Place 10 in wreg
0036 5201      00082         movf    MYREG, 1, 0     ;Using banked addressing (0 means use access bank), 
               00083                                 ;move MYREG value to itself, set status bit "Z"
               00084 
               00085 ;Example 3, Case 2:
               00086 
0038 0E80      00087         movlw   0x80            ;Place 0x80 in wreg
003A 6E01      00088         movwf   MYREG, 0        ;Copy wreg to MYREG in access bank
003C 0E10      00089         movlw   0x10            ;Place 0x10 in wreg
003E 5201      00090         movf    MYREG, 1, 0     ;Using banked addressing (0 means use access bank), 
               00091                                 ;move MYREG value to itself, set status bit "N"
               00092 
               00093 ;General testing:
               00094 
0040 0E00      00095         movlw   0x00            ;Place 0 in wreg
0042 6E00      00096         movwf   temp            ;Set value in temp1 equal to value in wreg
0044 5200      00097         movf    temp, f         ;Place the value in temp1 into itself (adjusts Z, N flags)
0046 0E80      00098         movlw   0x80            ;Place 0x80 in wreg
0048 6E00      00099         movwf   temp            ;Set value in temp1 equal to value in wreg
004A 0E00      00100         movlw   0x00            ;Place 0 in wreg
004C 5000      00101         movf    temp, w         ;Place the value in temp1 into wreg (adjusts Z, N flags)
               00102 
               00103 ;Test with banked addressing:
               00104 
004E 0101      00105         movlb   0x01            ;Set value in bank select register (BSR) to 1 to indicate bank 1
0050 0EAA      00106         movlw   0xaa            ;Place 0xaa in wreg
0052 6F00      00107         movwf   tempBank1       ;Using BSR, set value in tempBank1  equal to value in wreg
0054 5300      00108         movf    tempBank1, f    ;Using BSR, place the value in tempBank1 into itself (adjusts Z, N flags)
               00109 
0056 EF2B F000 00110 stop    goto    stop
               00111 


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

