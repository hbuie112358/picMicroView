gpasm-0.13.7 beta               xorwf.asm   3-11-2015  21:41:48          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;;;;;;; xorwf.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00002 ;
               00003 ;This program tests operation of xorwf, exclusive OR the WREG with 
               00004 ;contents of register f using the examples starting on page 790 of 
               00005 ;the PIC18 user manual.
               00006 ;
               00007 ;;;;;;; Program hierarchy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00008 ;
               00009 ; Mainline
               00010 ;  
               00011 ;
               00012 ;;;;;;; Assembler directives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00013 
               00014         #include p18f452.inc
               00001         LIST
               00002 ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
               00983         LIST
               00015         list  P=PIC18F452, F=INHX32, C=160, N=0, ST=OFF, MM=OFF, R=DEC, X=ON
               00016 
               00017 ;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00018 
               00019         cblock  0x000           ;Beginning of Access RAM
               00020         REG1
               00021         endc            
               00022 
               00023 ;;;;;;; Macro definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00024 
               00025 ;;;;;;; Vectors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00026 
               00027 
0000           00028         org  0x0000             ;Reset vector
0000 0000      00029         nop
0002 EF0E F000 00030         goto  Mainline
               00031 
0008           00032         org  0x0008             ;High priority interrupt vector
0008 EF04 F000 00033         goto  $                 ;Trap
               00034 
0018           00035         org  0x0018             ;Low priority interrupt vector
0018 EF0C F000 00036         goto  $                 ;Trap
               00037 
               00038 
               00039 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00040 ;See manual chapter 31 for more detail on individual instructions
               00041 ;Syntax:        xorwf   f, d, a         (register, destination register, bank select)
               00042                                         ;"d", "a" both default to 0. For d, can use "f" 
               00043                                         ;instead of 1, can use "w" instead of 0.
               00044 
               00045 ;               movwf   f, a            (register, bank select)
               00046 ;               movlw   k               (literal)
               00047 ;               movlb   k               (literal)
               00048 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00049 
               00050 ;;;;;;; Mainline program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00051 
001C 00052 Mainline
               00053 
               00054 ;Example 1:
               00055 
001C 0101      00056         movlb   1               ;Select bank 1 of data memory
001E 0EAF      00057         movlw   0xaf            ;Place 0xaf in wreg
0020 6F00      00058         movwf   REG1, 1         ;Copy 0xaf to REG1:             1010 1111
0022 0EB5      00059         movlw   0xb5            ;Place 0xb5 in wreg:            1011 0101
0024 1B00      00060         xorwf   REG1, 1, 1      ;Bit wise XOR wreg, REG1:       0001 1010
               00061                                 ;result in REG1
               00062                         
               00063 ;Example 2, Case 1:
               00064         
0026 0EAF      00065         movlw   0xaf            ;Place 0xaf in wreg
0028 6F00      00066         movwf   REG1, 1         ;Copy 0xaf to REG1:             1010 1111
002A 0EB5      00067         movlw   0xb5            ;Place 0xb5 in wreg:            1011 0101
002C 1900      00068         xorwf   REG1, 0, 1      ;Bit wise XOR wreg, REG1:       0001 1010
               00069                                 ;result in wreg
               00070         
               00071 ;Example 3:
               00072 
002E EE07 F0C2 00073         lfsr    0, 0x7c2        ;Place 0x7c2 in FSR0
0032 0EAF      00074         movlw   0xaf            ;Place 0xaf in wreg             
0034 6FEF      00075         movwf   INDF0, 1        ;Copy to INDF0                  1010 1111
0036 0EB5      00076         movlw   0xb5            ;Place 0xb5 in wreg             1011 0101
0038 1BEF      00077         xorwf   INDF0, 1, 1     ;Bit wise XOR wreg, INDF0:      0001 1010
               00078 
               00079 ;Example 4:
               00080 
003A 0EAA      00081         movlw   0xaa            ;Place 0xaa in wreg             
003C 6E00      00082         movwf   REG1            ;Copy to REG1                   1010 1010
003E 0EF8      00083         movlw   0xf8            ;Place 0xf8 in wreg             1111 1000
0040 1A00      00084         xorwf   REG1, 1, 0      ;Bit wise XOR wreg, REG1:       0101 0010       
               00085 
0042 EF21 F000 00086 stop            goto            stop
               00087 


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

