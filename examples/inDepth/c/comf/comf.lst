gpasm-0.13.7 beta               comf.asm    3-6-2015  20:37:30           PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;;;;;;; comf.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00002 ;
               00003 ;This program tests operation of comf instruction. Comf one's complements
               00004 ;the contents of register f.
               00005 ;
               00006 ;;;;;;; Program hierarchy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00007 ;
               00008 ; Mainline
               00009 ;  
               00010 ;
               00011 ;;;;;;; Assembler directives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00012 
               00013         #include p18f452.inc
               00001         LIST
               00002 ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
               00983         LIST
               00014         list  P=PIC18F452, F=INHX32, C=160, N=0, ST=OFF, MM=OFF, R=DEC, X=ON
               00015 
               00016 ;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00017 
               00018         cblock  0x000           ;Beginning of Access RAM
               00019         REG1
               00020         endc
               00021 
               00022 ;;;;;;; Macro definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00023 
               00024 ;;;;;;; Vectors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00025 
               00026 
0000           00027         org  0x0000             ;Reset vector
0000 0000      00028         nop
0002 EF0E F000 00029         goto  Mainline
               00030 
0008           00031         org  0x0008             ;High priority interrupt vector
0008 EF04 F000 00032         goto  $                 ;Trap
               00033 
0018           00034         org  0x0018             ;Low priority interrupt vector
0018 EF0C F000 00035         goto  $                 ;Trap
               00036 
               00037 ;;;;;;; Mainline program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00038 
001C 00039 Mainline
               00040 
               00041 ;Example 1:
               00042 ;Case 1:
               00043 
001C 0101      00044         movlb   1               ;Select bank 1 of data memory
001E 0E13      00045         movlw   0x13            ;Place 0x13 in wreg
0020 6F00      00046         movwf   REG1, 1         ;Copy wreg value to REG1
0022 1D00      00047         comf    REG1, 0, 1      ;Complement value in REG1, result in wreg (N bit is set)
               00048 
               00049 ;Case 2:
               00050 
0024 0EFF      00051         movlw   0xff            ;Place 0xff in wreg
0026 6F00      00052         movwf   REG1, 1         ;Copy contents of wreg into REG1
0028 1D00      00053         comf    REG1, 0, 1      ;Complement value in REG1, result in wreg (Z bit is set)
               00054         
               00055 ;Case 3:
               00056         
002A 0E00      00057         movlw   0x00            ;Place 0x00 in wreg
002C 6F00      00058         movwf   REG1, 1         ;Copy contents of wreg to REG1
002E 1D00      00059         comf    REG1, 0, 1      ;Complement value in REG1, result in wreg (N bit is set)
               00060 
               00061 
               00062 ;Example 2:
               00063 
0030 EE0F F0C2 00064         lfsr    0, 0xfc2        ;Place 0xfc2 in FSR
0034 0EAA      00065         movlw   0xaa            ;Place 0xaa in wreg
0036 6FEF      00066         movwf   INDF0, 1        ;Copy wreg value into address pointed to by FSR0,
               00067                                 ;movwf ignores banked addressing portion of instruction 
0038 1FEF      00068         comf    INDF0, 1, 1     ;Clear contents of register pointed to by FSR0, result in that register,
               00069                                 ;clrf again ignores banked addressing portion of instruction.
               00070 
               00071 ;Example 3:
               00072         
003A 0EFF      00073         movlw   0xff            ;Place 0xff in wreg
003C 6F00      00074         movwf   REG1, 1         ;Copy contents of wreg into REG1
003E 1F00      00075         comf    REG1, 1, 1      ;Complement value in REG1, result in REG1 (Z bit is set)
               00076         
               00077         
               00078 
0040 EF20 F000 00079 stop    goto            stop
               00080 


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

