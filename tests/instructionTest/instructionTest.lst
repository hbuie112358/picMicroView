gpasm-0.13.7 beta               instructionTest.asm2-24-2015  15:47:34          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;;;;;;; instructionTest.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00002 
               00003 ;
               00004 ;;;;;;; Program hierarchy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00005 ;
               00006 ; Mainline
               00007 ;  
               00008 ;
               00009 ;;;;;;; Assembler directives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00010 
               00011         #include p18f452.inc
               00001         LIST
               00002 ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
               00983         LIST
               00012         list  P=PIC18F452, F=INHX32, C=160, N=0, ST=OFF, MM=OFF, R=DEC, X=ON
               00013 
               00014 ;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00015 
               00016         cblock  0x000           ;Beginning of Access RAM
               00017         temp
               00018         endc
               00019 
               00020         cblock  0x100           ;Beginning of 0x100 block, just above Access Ram
               00021         tempBank1
               00022         endc    
               00023 
               00024         cblock  0x2eb           ;assign variables to same ls byte location as PLUSW0, PREINC0 
               00025         testPW0
               00026         testPI0
               00027         endc
               00028 
               00029         cblock  0x6e2           ;assign variable for example 2 and 3 test
               00030         testAbit
               00031         endc
               00032 
               00033 ;;;;;;; Macro definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00034 
               00035 ;;;;;;; Vectors ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00036 
               00037 
0000           00038         org  0x0000             ;Reset vector
0000 0000      00039         nop
0002 EF0E F000 00040         goto  Mainline
               00041 
0008           00042         org  0x0008             ;High priority interrupt vector
0008 EF04 F000 00043         goto  $                 ;Trap
               00044 
0018           00045         org  0x0018             ;Low priority interrupt vector
0018 EF0C F000 00046         goto  $                 ;Trap
               00047 
               00048 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00049 ;See manual chapter 31 for more detail on individual instructions
               00050 ;Syntax:        addwf   f, d, a         (register, destination register, bank select)
               00051                                         ;"d", "a" both default to 0. For d, can use "f" 
               00052                                         ;instead of 1, can use "w" instead of 0.
               00053 
               00054 ;               movwf   f, a            (register, bank select)
               00055 ;               movlw   k               (literal)
               00056 ;               movlb   k               (literal)
               00057 ;               lfsr    f, k            (f in {0, 1, 2})
               00058 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00059 
               00060 ;;;;;;; Mainline program ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00061 
001C 00062 Mainline
               00063 
               00064 ;;;;;;; addwf.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00065 
               00066 ;;In-depth note;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00067 ;
               00068 ;Found that compiler doesn't know the difference between plusw0 (or any other 
               00069 ;INDF register, for that matter) and a register assigned to address 0x0eb (or 
               00070 ;other INDF register address) in the cblock. This means that the chip doesn't 
               00071 ;know the difference either. How could "27EB" be anything other than "27EB" to 
               00072 ;the chip? See around line 105 below. Therefore, since writes to INDF registers 
               00073 ;ignore the "a" bit, writes to all registers whose least significant byte is the 
               00074 ;same as an INDF register must also ignore the "a" bit. How else could it work, 
               00075 ;since all the chip knows is what the compiler tells it? This will cause a hole 
               00076 ;in every bank where the least significant byte is the same as an INDF register. 
               00077 ;Specifically, from 0xXeb to 0xXef, 0xXe3 to 0xXe7, and 0xXdb to 0xXdf. This 
               00078 ;means that the assembly language programmer must know this and not plan to put
               00079 ;any data in that range, because anything addressed in that byte range will 
               00080 ;result in a read or write to an INDF register.
               00081 
               00082 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00083 ;See manual chapter 31 for more detail on individual instructions
               00084 ;Syntax:        addwf   f, d, a         (register, destination register, bank select)
               00085                                         ;"d", "a" both default to 0. For d, can use "f" 
               00086                                         ;instead of 1, can use "w" instead of 0.
               00087 
               00088 ;               movwf   f, a            (register, bank select)
               00089 ;               movlw   k               (literal)
               00090 ;               movlb   k               (literal)
               00091 ;               lfsr    f, k            (f in {0, 1, 2})
               00092 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00093 
               00094 
001C 0E05      00095         movlw   5               ;Place 5 in wreg
001E 6E00      00096         movwf   temp            ;Move 5 to temp
0020 0E06      00097         movlw   6               ;Place 6 in wreg
0022 2600      00098         addwf   temp, f         ;Add contents of wreg and temp, place result in temp
0024 0EFE      00099         movlw   0xfe            ;Place 0xfe in wreg (in order to produce carry with next add)
0026 2400      00100         addwf   temp, w         ;Add wreg, temp, status reg bit 0 (C) goes high
0028 2400      00101         addwf   temp, w         ;Add wreg, temp, status reg bit 0 (C) goes low
               00102 
               00103 ;Test with banked addressing, addwf disregards banked addressing in certain instances. Those are 
               00104 ;tested later. This scenario should work as normal banked addressing.
               00105 
002A 0101      00106         movlb   0x01            ;Place 1 in Bank Select Register (set for bank 1)
002C 0E37      00107         movlw   0x37            ;Place 0x37 in wreg
002E 6F00      00108         movwf   tempBank1       ;Using bank select, move wreg to tempBank1 in bank 1 at address 0x100
0030 0E10      00109         movlw   0x10            ;Place 0x10 in wreg
0032 2700      00110         addwf   tempBank1, 1    ;Add contents of wreg and temp, place result in tempBank1 (at address 0x100)
0034 0EF7      00111         movlw   0xf7            ;Place 0xf7 in wreg (in order to produce carry with next add)
0036 2500      00112         addwf   tempBank1, 0    ;Add wreg, tempBank1, result in wreg, status reg bit 0 (C) goes high
0038 2500      00113         addwf   tempBank1, w    ;Add wreg, temp, result in wreg, status reg bit 0 (C) goes low
               00114 
               00115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00116 ;This portion shows what "In-depth note" at top of this file tries to explain:
               00117 ;This portion tests that instructions for addwf where the destination register is an INDF register, 
               00118 ;which means INDFx, PLUSWx, PREINCx, POSTINCx, and POSTDECx (x in {0, 1, 2}), ignore the "a"bit. 
               00119 ;Reads or writes to any register with least significant byte in the ranges 0xXeb to 0xXef, 0xXe3  
               00120 ;to 0xXe7, and 0xXdb to 0xXdf will result in reading/writing to an INDF location. Effectively, 
               00121 ;registers in these ranges, other than the ones in Access Memory (which is bank 0), do not exist.
               00122 
003A EE00 F000 00123         lfsr    0, 0x000
003E 0102      00124         movlb   2
0040 0E05      00125         movlw   5
0042 6EEF      00126         movwf   INDF0
0044 6EEB      00127         movwf   PLUSW0
0046 6EEC      00128         movwf   PREINC0
0048 EE00 F000 00129         lfsr    0, 0x000
004C 27EB      00130         addwf   testPW0, 1, 1   ;Assigned to same address as PLUSW0, see instruction == 0x27EB
               00131                                 ;Since the value is written to PLUSW0, the bsr value of 2 has 
               00132                                 ;been ignored
               00133 
004E 27EC      00134         addwf   testPI0, 1, 1   ;Assigned to same address as PREINC0, see instruction == 0x27EC
               00135                                 ;Since the value is written to PREINC0, the bsr value of 2 has 
               00136                                 ;been ignored
               00137 
0050 27EE      00138         addwf   POSTINC0, 1, 1  ;Assigned to same address as temp2, see instruction == 0x27EC
0052 EE00 F000 00139         lfsr    0, 0x000
0056 27EB      00140         addwf   PLUSW0, 1, 1    ;Assigned to same address as temp1, see instruction == 0x27EB
               00141 
0058 25EC      00142         addwf   PREINC0, w, 1   ;Assigned to same address as temp2, see instruction == 0x27EC
               00143                                 ;This instruction only adds 1 to FSR since PREINC0 is only read once.
               00144 
               00145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00146 
               00147 ;Manual, example1, case 1:
               00148 ;Shows that adding FSR ignores "a" bit, and that addwf gives a correct answer
               00149 
005A EE02 F0C2 00150         lfsr    0, 0x2c2
005E 0E17      00151         movlw   0x17
0060 27E9      00152         addwf   FSR0L, 1, 1
               00153 
               00154 ;Manual, example1, case 2:
               00155 ;Shows that adding FSR ignores "a" bit when adding to FSR, and that when adding to FSR0L creates a carry, FSR0H is incremented
0062 EE02 F0FF 00156         lfsr    0, 0x2ff
0066 27E9      00157         addwf   FSR0L, 1, 1
               00158 
               00159 ;Manual, example 2:
               00160 ;Shows that addwf ignores "a" bit when adding to an INDF register
               00161 
0068 0102      00162         movlb   2               ;Set BSR value to 2
006A EE06 F0C2 00163         lfsr    0, 0x6c2        ;Load FSR with value
006E 0E20      00164         movlw   0x20            ;Place 0x20 in wreg
0070 6FEF      00165         movwf   INDF0, 1        ;Place value in wreg in location pointed to by INDF0
0072 0E17      00166         movlw   0x17            ;Place 0x17 in wreg
0074 27EF      00167         addwf   INDF0, 1, 1     ;Add wreg with value in location pointed to by INDF0,
               00168                                 ;place result in location pointed to by INDF0.
               00169                                 ;Since "a" bit is set (the second 1), banked addressing 
               00170                                 ;is called for, but since the register argument is an
               00171                                 ;INDF register, banked addressing is ignored
               00172 
               00173 ;Manual, example 3:
               00174         
0076 0E20      00175         movlw    0x20           ;Place 0x20 in wreg
0078 6FEF      00176         movwf   INDF0, 1        ;Place value in wreg in location pointed to by INDF0
007A 0E17      00177         movlw   0x17            ;Place 0x17 in wreg
007C 26EF      00178         addwf   INDF0, 1, 0     ;Add wreg with value in location pointed to by INDF0,
               00179                                 ;place result in location pointe to by INDF0.
               00180                                 ;Shows that "a" bit being 1 or 0 doesn't matter when 
               00181                                 ;register argument is an INDF register.
               00182         
               00183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00184 ;;;;;;;addwfc.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
               00186 ;
               00187 ;This program tests operation of the addwfc instruction. It adds the 
               00188 ;contents of the WREG and the carry bit to the contents of register f.
               00189 ;
               00190 
               00191 ;Test no carry, use bsr, write wreg:
               00192 
007E 0E17      00193         movlw   0x17
0080 0101      00194         movlb   1
0082 6F00      00195         movwf   tempBank1       ;Store 0x17 at address 0x100
0084 0EC2      00196         movlw   0xc2
0086 2100      00197         addwfc  tempBank1, 0, 1 ;Add WREG, C bit, and temp, 
               00198                                 ;place result (0xd9) in WREG (no carry)
               00199 
               00200 ;Test no carry, use bsr, write freg:
0088 0E18      00201         movlw   0x18
008A 0101      00202         movlb   1
008C 6F00      00203         movwf   tempBank1       ;Store 0x18 at address 0x100
008E 0EC2      00204         movlw   0xc2
0090 2300      00205         addwfc  tempBank1, 1, 1 ;Add WREG, C bit, and temp, 
               00206                                 ;place result (0xd9) in tempBank1 (no carry)
               00207 
               00208 ;Test no carry, no bsr, write wreg:
               00209 
0092 0E17      00210         movlw   0x17
0094 0101      00211         movlb   1
0096 6E00      00212         movwf   temp            ;Store 0x17 at address 0x100
0098 0EC2      00213         movlw   0xc2
009A 2000      00214         addwfc  temp, 0         ;Add WREG, C bit, and temp, 
               00215                                 ;place result (0xd9) in WREG (no carry)
               00216 
               00217 ;Test no carry, no bsr, write freg:
009C 0E18      00218         movlw   0x18
009E 0101      00219         movlb   1
00A0 6E00      00220         movwf   temp            ;Store 0x18 at address 0x000
00A2 0EC2      00221         movlw   0xc2
00A4 2200      00222         addwfc  temp, 1         ;Add WREG, C bit, and temp, 
               00223                                 ;place result (0xd9) in temp (no carry)
               00224 
               00225 ;Cause carry bit to be set:
               00226 
00A6 0EFE      00227         movlw   0xfe
00A8 6E00      00228         movwf   temp
00AA 0EAD      00229         movlw   0xad
00AC 2000      00230         addwfc  temp, 0         ;Set carry bit
               00231 
               00232 ;Test add with carry:
               00233 
00AE 6E00      00234         movwf   temp            
00B0 0E02      00235         movlw   0x02
00B2 2000      00236         addwfc  temp, 0         ;Add WREG, C bit, and temp (0x02 + 1 + 0xab), 
               00237                                 ;place result (0xae) in WREG (clears carry bit)
               00238 
               00239 
               00240 
               00241 
               00242 
               00243 
               00244 
               00245 
               00246 
               00247 
               00248 
               00249 
               00250 
               00251 
               00252 
               00253 
               00254 
               00255 
               00256 
00B4 0000      00257         nop
00B6 0000      00258         nop
00B8 0000      00259         nop
00BA 0000      00260         nop
               00261 
               00262 
00BC EF5E F000 00263 stop    goto            stop
               00264 


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

